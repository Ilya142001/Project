-- Создание базы данных
CREATE DATABASE IF NOT EXISTS training_system 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

USE training_system;

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Таблица для логирования входов (опционально)
CREATE TABLE IF NOT EXISTS login_attempts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    email VARCHAR(100),
    attempt_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    success BOOLEAN,
    ip_address VARCHAR(45),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Создание тестового пользователя (пароль: password123)
INSERT INTO users (full_name, email, password) VALUES 
('Тестовый Пользователь', 'test@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');

_________________________________________________________________________

ALTER TABLE users 
ADD COLUMN first_name VARCHAR(50) AFTER full_name,
ADD COLUMN last_name VARCHAR(50) AFTER first_name,
ADD COLUMN position VARCHAR(100) AFTER last_name,
ADD COLUMN photo_url VARCHAR(255) AFTER position,
ADD COLUMN department VARCHAR(100) AFTER photo_url;

UPDATE users SET 
first_name = 'Тестовый',
last_name = 'Пользователь',
position = 'Старший специалист',
department = 'ИТ-отдел',
photo_url = 'images/avatar.jpg'
WHERE email = 'test@example.com';

-- Таблица компетенций
CREATE TABLE IF NOT EXISTS competencies (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Таблица оценок
CREATE TABLE IF NOT EXISTS ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    competency_id INT NOT NULL,
    self_rating INT CHECK (self_rating BETWEEN 1 AND 5),
    manager_rating INT CHECK (manager_rating BETWEEN 1 AND 5),
    colleague_rating INT CHECK (colleague_rating BETWEEN 1 AND 5),
    subordinate_rating INT CHECK (subordinate_rating BETWEEN 1 AND 5),
    rating_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (competency_id) REFERENCES competencies(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Наполнение компетенциями
INSERT INTO competencies (name, description) VALUES 
('Межфункциональное взаимодействие', 'Эффективное сотрудничество с другими отделами'),
('Аналитические навыки', 'Способность анализировать данные и принимать решения'),
('Коммуникабельность', 'Умение clearly выражать мысли и слушать других'),
('Лидерство', 'Способность вести за собой команду'),
('Техническая экспертиза', 'Профессиональные знания в своей области'),
('Клиентоориентированность', 'Понимание и удовлетворение потребностей клиентов'),
('Стратегическое мышление', 'Способность видеть перспективу и планировать');

-- Добавление тестовых оценок
INSERT INTO ratings (user_id, competency_id, self_rating, manager_rating, colleague_rating, subordinate_rating, rating_date) VALUES
(1, 1, 4, 5, 4, 3, '2024-01-15'),
(1, 2, 5, 4, 5, 4, '2024-01-15'),
(1, 3, 3, 4, 3, 4, '2024-01-15'),
(1, 4, 4, 3, 4, 3, '2024-01-15'),
(1, 5, 5, 5, 5, 5, '2024-01-15');


________________________________________
-- Добавляем таблицу для детальных оценок по критериям
CREATE TABLE IF NOT EXISTS competency_criteria (
    id INT AUTO_INCREMENT PRIMARY KEY,
    competency_id INT NOT NULL,
    criteria_text TEXT NOT NULL,
    weight FLOAT DEFAULT 1.0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (competency_id) REFERENCES competencies(id) ON DELETE CASCADE
);

-- Таблица для детальных оценок
CREATE TABLE IF NOT EXISTS detailed_ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    criteria_id INT NOT NULL,
    self_rating FLOAT,
    manager_rating FLOAT,
    colleague_rating FLOAT,
    subordinate_rating FLOAT,
    rating_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (criteria_id) REFERENCES competency_criteria(id) ON DELETE CASCADE
);

-- Добавляем критерии для компетенций
INSERT INTO competency_criteria (competency_id, criteria_text, weight) VALUES
(1, 'Оперативно реагируют на запросы от других подразделений', 1.0),
(1, 'При обсуждении в командах предлагает хорошие решения, основанные на сочетании анализа, здравого смысла и опыта', 1.2),
(1, 'Выполняет взятые на себя обязательства', 1.0),
(1, 'Информирует других о наличии неэффективных методов работы или проблем', 1.1),
(1, 'Сотрудники из других подразделений обращаются к сотруднику за экспертными решениями', 1.0),
(1, 'Умеет быстро находить точки соприкосновения и разрешить проблемы в общих интересах', 1.1),
(1, 'Легко завоевывает доверие и поддержку коллег из других подразделений', 1.2),
(1, 'Делится информацией со смежными подразделениями в ходе совместных проектов', 1.0),
(1, 'Проявляет уважительное отношение к другим членам команды/партнерам', 1.0),
(1, 'Помогает другим членам команды/коллегам, в том числе в решении сложных вопросов', 1.1);